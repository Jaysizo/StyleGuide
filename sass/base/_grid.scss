@import "breakpoints";
@import "bourbon/bourbon";

%mobile-first {
  width: 100%;
}

.flex-container, .row {
  @include display(flex);
  @include flex-flow(row wrap);
  @include flex-basis($base-font-size);
  list-style: none;
  margin: 0;
  padding: 0;
}

.flex-cell {
  @extend %mobile-first;
}

.flex-cells {
  & > .flex-cell {
    @include display(flex);
  }
}

.flex-top {
  @include align-items(flex-start);
}

.flex-bottom {
  @include align-items(flex-end);
}

.flex-center {
  @include align-items(center);
}

.flex-v-top {
  @include justify-content(flex-start);
}

.flex-v-bottom {
  @include justify-content(flex-end);
}

.flex-v-center {
  @include justify-content(center);
}

.flex-cell-top {
  @include align-self(flex-start);
}

.flex-cell-bottom {
  @include align-self(flex-end);
}

.flex-cell-center {
  @include align-self(center);
}

// Examples:
//  .flex-full
//  .flex-sm-fit
//  .flex-md-1of2
//  .flex-lg-1of3
@mixin grid-sizing($name: "") {
  @if $name != "" and $name != "xs" {
    $name: "-#{$name}";
  } @else {
    $name: "";
  }
  .flex#{$name}-fit > .flex-cell,
  .flex-cell.flex#{$name}-fit {
    @include flex(1);
  }
  @each $part in 2, 3, 4 {
    .flex-cell.flex#{$name}-#{$part} {
      @include flex($part);
    }
  }
  .flex#{$name}-full > .flex-cell,
  .flex-cell.flex#{$name}-full {
    width: 100%;
  }
  @each $part in 2, 3, 4 {
    .flex#{$name}-1of#{$part} > .flex-cell,
    .flex-cell.flex#{$name}-1of#{$part} {
      width: percentage(1 / $part);
    }
  }
  @if $name == "" {
    $name: "-xs";
    @each $breakpoint, $min-width in $breakpoints {
      $i: 0;
      @while $i < 12 {
        $i: $i + 1;
        .col-#{$breakpoint}-#{$i} {
          @extend %mobile-first;
        }
      }
    }
  }
  $i: 0;
  .col#{$name}-push-0 {
    position: relative;
    left: auto;
  }
  .col#{$name}-pull-0 {
    position: relative;
    right: auto;
  }
  @while $i < 12 {
    $i: $i + 1;
    .col#{$name}-#{$i} {
      width: percentage($i / 12);
    }    
    .col#{$name}-offset-#{$i} {
      margin-left: percentage($i / 12);
    }
    .col#{$name}-push-#{$i} {
      position: relative;
      left: percentage($i / 12);
    }
    .col#{$name}-pull-#{$i} {
      position: relative;
      right: percentage($i / 12);
    }
  }
}

// create the default grid-sizing modifiers
@include grid-sizing();

// create grid-sizing modifiers for each breakpoint
@each $breakpoint, $min-width in $breakpoints {
  @include breakpoint($breakpoint) {
    @include grid-sizing($breakpoint);
  }
}

// Examples:
//    .flex-gutters
//    .flex-sm-gutters-wide
//    .flex-md-gutters-wider
//    .flex-lg-gutters-widest
@mixin grid-gutters($name: "") {
  @if $name != "" and $name != "xs" {
    $name: "-#{$name}";
  }
  .flex#{$name}-gutters {
    margin-left: -0.5rem;
    & > .flex-cell {
      padding-left: 0.5rem;
    }
  }
  @each $part in 1, 2, 3 {
    $r: "";
    @if $part > 1 {
      $r: "r";
    } @else if $part > 2 {
      $r: "st";
    }
    .flex#{$name}-gutters-wide#{$r} {
      margin-left: -1rem * $part;
      & > .flex-cell {
        padding-left: 1rem * $part;
      }
    }
  }
}

// create the default grid-gutters modifiers
@include grid-gutters();

// create grid-gutters modifiers for each breakpoint
@each $breakpoint, $min-width in $breakpoints {
  @include breakpoint($breakpoint) {
    @include grid-gutters($breakpoint);
  }
}
